# Tarefa 017 - Configuração de software em tempo de execução, Generics, Closure e Logging - 30/06/2023

1. Considere os seguintes links, sobre os temas **Configuração de software em tempo de execução, _Generics_, _Closure_ e _Logging_**

  1.1 Configuração de software em tempo de execução:

      1.1.1 - [Link1](https://www.baeldung.com/spring-profiles);
        Os perfis do Spring são um recurso do Spring Framework que permite aos desenvolvedores definir e gerenciar configurações diferentes para ambientes diferentes. Um perfil é um agrupamento lógico nomeado de acordo com as definições de 'Beans' que pode ser ativado com base no ambiente em que a aplicação está sendo executada. Ao utilizar perfis, os programadores podem alternar facilmente entre diferentes configurações para diferentes ambientes, como desenvolvimento, teste e produção. Isto permite uma maior flexibilidade e uma gestão mais fácil da configuração da aplicação, bem como a capacidade de fornecer diferentes implementações de um Bean para diferentes casos de utilização. Os perfis podem ser ativados através de vários mecanismos, tais como propriedades do sistema, variáveis de ambiente e ficheiros de configuração. Alguns casos de uso comuns para a utilização de perfis do Spring em um projeto incluem o gerenciamento da configuração para diferentes ambientes de implantação, fornecendo diferentes implementações de um bean para diferentes casos de uso e separando ambientes de teste e produção.

      1.1.2 - [Link2](https://www.baeldung.com/inversion-control-and-dependency-injection-in-spring).
        A inversão de controle (IoC) é um princípio da engenharia de software que transfere o controle de objetos ou partes de um programa para um container ou framework. Permite que um framework assuma o controle do fluxo de um programa e faça chamadas para o código. A injeção de dependências (DI) é um mecanismo utilizado para implementar a IoC, em que as dependências de um objeto são injetadas no mesmo por uma entidade externa, em vez de ser o próprio objeto a criá-las. Por outras palavras, a DI é uma forma de alcançar a IoC, permitindo que o framework injete dependências no código.

  1.2 _Closure_:

    1.2.1 - [Link3](https://www.geeksforgeeks.org/closures-in-java-with-examples/).
      Closure é um conceito de programação que permite que uma função tenha acesso às variáveis de seu escopo externo, mesmo após a execução da função externa ter sido concluída. Em outras palavras, uma closure é uma função que "lembra" do ambiente em que foi criada, incluindo as variáveis locais e parâmetros da função externa. Isso permite que a closure acesse e manipule essas variáveis, mesmo que a função externa já tenha retornado. Em Java, closures podem ser implementadas usando expressões lambda.

    1.2.2 - [Link4](https://receitasdecodigo.com.br/java/exemplo-de-foreach-do-java-8).
      O forEach surgiu no Java 8 para facilitar o percorrimento de listas. Além disso, ainda proporciona uma maneira mais fácil de filtrar valores em listas populadas fazendo uso de expressões lambda.

    1.2.3 - [Link5](https://www.devmedia.com.br/como-usar-funcoes-lambda-em-java/32826).
      Função lambda consiste em uma função sem declaração, ou seja, que é declarada e usada na mesma linha e portanto não necessita de um nome, tipo de retorno ou modificador de acesso. A grande vantagem da função lambda é diminuir a quantidade de código necessário para a escrita de algumas funções.

  1.3 _Generics_:

    1.3.1 - [Link6](https://www.devmedia.com.br/usando-generics-em-java/28981).
      A principal razão da existência do Generics é poupar o desenvolvedor de códigos redundantes. Os Generics podem ser utilizados como parâmetros também em Classes e Interfaces, tornando possível utilizar essa "variável" em todo o escopo da classe.

    1.3.2 - [Link7](https://www.devmedia.com.br/java-generics-trabalhando-com-metodos/30911).
      O uso dos Generics nos métodos tem como função principal garantir o type-safety, garantindo que uma collection tenha apenas o tipo de objeto que você deseja, sem necessidade de castings repetitivos.

    1.3.3 - [Link8](https://howtodoinjava.com/java/generics/complete-java-generics-tutorial/).

  1.4 _Logging_:

    1.4.1 - [Link9](https://www.loggly.com/ultimate-guide/java-logging-basics/).

    1.4.2 - [Link10](https://www.journaldev.com/977/logger-in-java-logging-example).

    1.4.3 - [Link11](https://www.edureka.co/blog/logger-in-java).
      Logging é o processo de registrar eventos, atividades ou mensagens relevantes durante a execução de um programa, aplicativo ou sistema. Esses registros são armazenados em arquivos ou em algum outro formato, permitindo que os desenvolvedores, administradores de sistema ou outros usuários analisem e entendam o comportamento do sistema. Esse processo é útil pois facilita a manutenção do software fornecendo informações valiosas para depuração, monitoramento, auditoria e análise de dados. É uma ferramenta poderosa para entender o comportamento do sistema e melhorar sua eficiência, qualidade e confiabilidade. 

2. Solicita o estudo destes temas e elaborar um texto descrito, manifestando seu entendimento a respeito de cada um deles e ainda apresentando exemplos de utilização dos mesmos.

**INSTRUÇÕES**
1. Esta é uma tarefa individual. A entrega deve ser entregue no seu repositório pessoal utilizado para a manutenção do controle de versão dos artefatos da disciplina, dentro de uma pasta chamada tarefa017.
2. O prazo para entrega desta tarefa é as 23h59min do dia 02/07/2023.
